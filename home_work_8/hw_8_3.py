# 3. Создайте собственный класс-исключение, который должен проверять содержимое
# списка на наличие только чисел. Проверить работу исключения на реальном
# примере. Запрашивать у пользователя данные и заполнять список необходимо
# только числами. Класс-исключение должен контролировать типы данных элементов
# списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду
# «stop». При этом скрипт завершается, сформированный список с числами
# выводится на экран.
# Подсказка: для этого задания примем, что пользователь может вводить только
# числа и строки. Во время ввода пользователем очередного элемента необходимо
# реализовать проверку типа элемента. Вносить его в список, только если
# введено число. Класс-исключение должен не позволить пользователю ввести
# текст (не число) и отобразить соответствующее сообщение. При этом работа
# скрипта не должна завершаться.

class Validate:
    def __init__(self, *args):
        self.my_list = []

    def exception(self):
        while True:
            try:
                a = int(input('Введите значения и нажимайте Enter - '))
                self.my_list.append(a)
                print(f'Текущий список - {self.my_list} \n ')
            except:
                print(f"Введено не число")
                b = input(f'Если хотите выйти введите "stop" ')

                if b == 'stop':
                    print(f'Текущий список - {self.my_list} \n ')
                    break


c = Validate()
print(c.exception())
